@model UI.ViewModels.HealthReportChartViewModel
@{
    ViewBag.Title = "HealthReport";
    Layout = "~/Views/Shared/HomeLayout2.cshtml";
}

@section Styles{
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-slider/11.0.2/css/bootstrap-slider.min.css" integrity="sha512-3q8fi8M0VS+X/3n64Ndpp6Bit7oXSiyCnzmlx6IDBLGlY5euFySyJ46RUlqIVs0DPCGOypqP8IRk/EyPvU28mQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        #sliderNode .slider-handle {
            background: #f56a6a;
        }
    </style>


}
<header style="background-color: #fff0f0; width: 100%; padding-right: 0px " class="pt-5 pb-1 m-0 col-12">
    <div class="row" style="width: 100%; padding-right: 20px">

        <div class="col-3 col-sm-3 col-lg-2 p-2 p-0" style="text-align:center">
            <a href="~/Home2/Index"><img src="~/Areas/Admin/Content/tempimage/hLogoRed.jpg" style="max-width:90px;width:100%"></a>
        </div>
        <div class="col-8 col-sm-7 col-lg-8 p-1 align-self-center">
            <h2 style="font-size:1.8em"><i class="fas fa-chart-bar" style="width:30px"></i> 綜合圖表</h2>
        </div>

    </div>
</header><header id="header" class="m-0 p-0"></header>

         <section class="pt-2 pb-5">

             <div class="row my-4">
                 <div class="col-1  ">
                     <span class="h4" style="color:#f56a6a">月份拉軸</span>
                 </div>
                 <div class="col-9  ">
                     <input style="width:100%" id="ex6" type="text" data-slider-min="-11" data-slider-id="sliderNode" data-slider-max="0" data-slider-step="1" data-slider-value="0" data-slider-handle="square" />
                 </div>
                 <div class="col-2 ">
                     <input type="button" id="btnThisMonth" value="本月紀錄" class="btn btn-default fit" />


                 </div>
             </div>
             <div class="col-12    mt-5" style="border-radius: 0.9em; height:850px; margin: auto; box-shadow: 5px 5px 20px #E0E0E0  " >
                 <div class="d-flex justify-content-between mb-4 pt-3">
                     <input type="button" id="btnPrevMonth" value="<" class="btn btn-default" />

                     <h1 id="titleMonth" style="display:inline">@Model.YearMonth</h1>


                     <input type="button" id="btnNextMonth" value=">" class="btn btn-default" />

                 </div>
                 <canvas id="generalChart" class="pb-5"></canvas>

             </div>

             <div class="row my-5" style="display:flex;justify-content:center">
                 <div class="col-6 row">
                     <div class="col-6 p-1">
                         <input type="button" id="btnShowWater" value="補水紀錄" class="button  fit " />
                     </div>
                     <div class="col-6  p-1">
                         <input type="button" id="btnShowWeight" value="體重總表" class="button  fit " />
                     </div>
                 </div>
                 <div id="btnsCals" class="col-6 row">
                     <div class="col-6  p-1">
                         <input type="button" id="btnShowGained" value="飲食攝取" class="button primary  fit" />
                     </div>
                     <div class="col-6  p-1">

                         <input type="button" id="btnShowBurned" value="運動消耗" class="button  primary fit" />
                     </div>

                 </div>
             </div>
         </section>
    <div id="editDoneModal" class="modal fade " tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">



                    <h5 class="modal-title">資料載入中...</h5>
                </div>
                <div class="modal-body">
                    <img src="../Content/Images/loadingDots.gif" />

                </div>
                <div class="modal-footer">
                    @* <input type="button" value="確定" class="btn btn-default fit" onclick="function CloseThisModal(){$('#editDoneModal').modal('hide')};CloseThisModal()" />*@

                </div>
            </div>
        </div>

    </div>
    @section Scripts{
        <script src="~/Content/js/chart.min.js"></script>
        <script src="~/Content/js/jquery-ui.js"></script>
        <script src="~/Content/js/popper.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-Piv4xVNRyMGpqkS2by6br4gNJ7DXjqk09RmUpJ8jgGtD7zP9yug3goQfGII0yAns" crossorigin="anonymous"></script>
        <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
        <script src="~/Content/js/chartjs-plugin-datalabels.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-slider/11.0.2/bootstrap-slider.min.js" integrity="sha512-f0VlzJbcEB6KiW8ZVtL+5HWPDyW1+nJEjguZ5IVnSQkvZbwBt2RfCBY0CBO1PsMAqxxrG4Di6TfsCPP3ZRwKpA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

        <script>
            var monthlyGainedCals = '@Html.Raw(Json.Encode(Model.GainedCalsByMonth))';

            var monthlyDays = '@Html.Raw(Json.Encode(Model.MonthlyDays))';
            var monthlyBurnedCals = '@Html.Raw(Json.Encode(Model.MonthlyBurnedCals))';
            var monthlySubstratedGainedCals = '@Html.Raw(Json.Encode(Model.MonthlySubstratedGained))';
            var monthlyWeights = '@Html.Raw(Json.Encode(Model.MonthlyWeights))';
            var monthlyGainedWater = '@Html.Raw(Json.Encode(Model.MonthlyGainedWater))';

        var monthlySuggestedWaterLogRanges = '@Html.Raw(Json.Encode(Model.MonthlySuggestedWaterLogRanges))';
        var monthlyTDEEs = '@Html.Raw(Json.Encode(Model.MonthlyTDEEs))';

        var monthlyIsSuccess = '@Html.Raw(Json.Encode(Model.MonthlyIsSuccess))';

        //====================================


        var slider = new Slider("#ex6"
            , {
            formatter: function (value) {
                const today = new Date();
                const theDate = new Date();
                    theDate.setMonth(today.getMonth() + value);
                    const monthValue = theDate.getMonth()+1;



                    return monthValue+"月";
            }
        }
        );
        slider.on("slideStop", function (sliderValue) {
            glMonthFlag.Val = sliderValue

        });
            $("#btnThisMonth").click(() => {
                if (glMonthFlag.Val === 0) { return; }
                glMonthFlag.Val = 0;
            })


        $(document).ready(() => {

            monthlyWeightsArr.CurrVal = JSON.parse(monthlyWeights);  //formating
            monthlyIsSuccessArr.letMeKnow()
            monthlyTDEEsArr.letMeKnow()
            Chart.defaults.font.size = 18;
            CheckSelectedOption()
            //alert(monthlyIsSuccessArr.CurrVal)
        })
        var monthlyIsSuccessArr = {
            value: JSON.parse(monthlyIsSuccess),
            letMeKnow() {
                let glIsSucessFilledColors = []
                let glIsSucessBorderColors = []

                for (let i = 0; i < this.value.length; i++)
                {
                    let filledColor = "rgba(60, 120, 0, 0.4)";
                    let borderColor = "rgba(60, 120, 0, 1)";
                    if (this.value[i] == false) {
                       filledColor = "rgba(173, 0, 0, 0.4)";
                         borderColor = "rgba(173, 0, 0, 1)";
                    }
                    glIsSucessFilledColors[i] = filledColor;
                    glIsSucessBorderColors[i] = borderColor;

                }
                generalChart.data.datasets[0].backgroundColor = glIsSucessFilledColors
                generalChart.data.datasets[0].borderColor = glIsSucessBorderColors


            },
            get CurrVal() {
                return this.value;
            },
            set CurrVal(value) {

                this.value = value;
                this.letMeKnow();
            }
        }

        var monthlyTDEEsArr = {
            value: JSON.parse(monthlyTDEEs),
            letMeKnow() {
                generalChart.data.datasets[6].data = this.CurrVal
                generalChart.update();
                let BMRarr = []
                for (let i = 0; i < this.value.length; i++)
                {
                    BMRarr[i] =this.value[i]*0.8
                }
                monthlyBMR.CurrVal = BMRarr
            },
            get CurrVal() {
                return this.value;
            },
            set CurrVal(value) {

                this.value = value;
                this.letMeKnow();
            }
        }
        var monthlyBMR = {
            value: "",
            letMeKnow() {
                generalChart.data.datasets[7].data = this.CurrVal
                generalChart.update();

            },
            get CurrVal() {
                return this.value;
            },
            set CurrVal(value) {

                this.value = value;
                this.letMeKnow();
            }
        }


        var MonthlySuggestedWaterLogRangesArr = {
            value: JSON.parse(monthlySuggestedWaterLogRanges),
            letMeKnow() {
                generalChart.data.datasets[4].data = this.CurrVal[0]
                generalChart.data.datasets[5].data = this.CurrVal[1]
                generalChart.update();
            },
            get CurrVal() {
                return this.value;
            },
            set CurrVal(value) {

                this.value = value;
                this.letMeKnow();
            }
        }

        var monthlyGainedWaterArr = {
            value: JSON.parse(monthlyGainedWater),
            letMeKnow() {
                generalChart.data.datasets[3].data = this.CurrVal
                generalChart.update();
            },
            get CurrVal() {
                return this.value;
            },
            set CurrVal(value) {

                this.value = value;
                this.letMeKnow();
            }
        }

        var monthlyWeightsArr = {
            value: JSON.parse(monthlyWeights),
            letMeKnow() {
                generalChart.data.datasets[2].data = this.CurrVal
                generalChart.update();
            },
            get CurrVal() {
                return this.value;
            },
            set CurrVal(value) {
                let adjusted =[]
                value.forEach(weight => {
                    if (weight <= 0) { weight = null; }
                    adjusted.push(weight)

                });
                this.value = adjusted;
                this.letMeKnow();
            }
        }
        var monthlySubstratedGainedCalsArr = {
            value: JSON.parse(monthlySubstratedGainedCals),
            letMeKnow() {
                generalChart.data.datasets[0].data = this.CurrVal
                generalChart.update();

            },
            get CurrVal() {
                return this.value;
            },
            set CurrVal(value) {


                this.value = value;
                this.letMeKnow();
            }
        }

        var monthlyBurnedCalsArr = {
            value: JSON.parse(monthlyBurnedCals),
            letMeKnow() {
                generalChart.data.datasets[1].data = this.CurrVal
                generalChart.update();
            },
            get CurrVal() {
                return this.value;
            },
            set CurrVal(value) {
                this.value = value;
                this.letMeKnow();
            }
        }



        var monthlyDaysArr = {
            value: JSON.parse(monthlyDays),
            letMeKnow() {
                generalChart.data.labels = this.value
                generalChart.update();
            },
            get CurrVal() {
                return this.value;
            },
            set CurrVal(value) {
                this.value = value;
                this.letMeKnow();
            }
        }

        var monthlyGainedCalsArr = {
            value: JSON.parse(monthlyGainedCals),
            letMeKnow() {

            },
            get CurrVal() {
                return this.value;
            },
            set CurrVal(value) {
                this.value = value;
                this.letMeKnow();
            }
        }





        //==================
        var glMonthFlag = {
            value: 0,
            letMeKnow() {
                GetChartJson();


                $('#editDoneModal').modal('show')

                /*GetDateDietLogsByDateAjex(this.Val, null)*/
                slider.setValue(this.value)

            },
            get Val() {
                return this.value;
            },
            set Val(value) {
                if (value >= 0) {
                    value = 0;
                }
                this.value = value;
                this.letMeKnow();
            }
        }


        //==================================

            var generalChartEle = document.getElementById('generalChart').getContext('2d');
            var generalChart = new Chart(generalChartEle, {
                data: {
                    labels: monthlyDaysArr.CurrVal,
                    datasets: [{
                        type: 'bar',
                        label: '飲食攝取(大卡)',
                        data: monthlySubstratedGainedCalsArr.CurrVal,
                        backgroundColor: [

                           "rgba(60, 120, 0, 0.4)",

                        ],
                        borderColor: [
                        "rgba(60, 120, 0, 1)",

                        ],
                        borderWidth: 2,
                    //    yAxisID: 'y',
                    }, {
                        type: 'bar',

                        label: '運動消耗(大卡)',
                        data: monthlyBurnedCalsArr.CurrVal,
                            backgroundColor: [
                                'rgba(120, 120, 120, 0.4)',



                            ],
                            borderColor: [
                                'rgba(120, 120, 120, 1)',

                            ],
                        borderWidth: 2,
                        //yAxisID: 'y',

                        },
                        {
                            type: 'line',
                            radius:0,
                            label: '體重(公斤)',
                            data: monthlyWeightsArr.CurrVal,
                            backgroundColor: [
                                'rgba(120, 120, 120, 0.2)',



                            ],
                            borderColor: [
                                'rgba(255, 209, 5, 1)',

                            ],
                            borderWidth: 4,
                            lineTension: 0.5,


                        },
                        //========================
                        {
                            type: 'line',
                            data: monthlyGainedWaterArr.CurrVal,
                            label: '水攝取量(毫升)',

                            fill: true,
                            lineTension: 0.5,
                            radius: 0,
                            backgroundColor: [
                                "rgba(0, 76, 153,0.3)"

                            ],
                            borderColor: [
                                'rgba(0, 89, 179,1)',
                            ],
                            borderWidth: 3
                        },
                        {
                            type: 'line',
                            data: MonthlySuggestedWaterLogRangesArr.CurrVal[0],
                            label: '飲水建議下限(毫升)',
                            //fillColor: "rgba(220,220,220,0.1)",
                            //strokeColor: "rgba(220,220,220,0.1)",
                            //pointColor: "rgba(220,220,220,0.1)",
                            //pointStrokeColor: "rgba(220,220,220,0.1)",
                            backgroundColor: [
                                "rgba(220,220,220,0.5)"

                            ],
                            borderColor: [
                                'rgba(100,100,100,1)',
                            ],
                            fill: true,
                            lineTension: 0.5,
                            radius: 0,
                            borderWidth: 0.3
                        },

                        {
                            type: 'line',
                            data: MonthlySuggestedWaterLogRangesArr.CurrVal[1],
                            label: '飲水建議上限(毫升)',
                            //data: [20, 80, 60, 90, 30, 50, 60],
                            //fillColor: "rgba(220,220,220,0.1)",
                            //strokeColor: "rgba(220,220,220,0.1)",
                            //pointColor: "rgba(220,220,220,0.1)",
                            //pointStrokeColor: "rgba(220,220,220,0.1)",
                            backgroundColor: [
                                "rgba(220,220,220,0.5)"

                            ],
                            borderColor: [
                                'rgba(100,100,100,1)',
                            ],
                            fill: true,
                            lineTension: 0.5,
                            radius: 0,

                            borderWidth: 0.3
                        }, {
                            type: 'line',
                            data: monthlyTDEEsArr.CurrVal,
                            borderDash: [10, 5],
                            label: 'TDEE(大卡)',
                            //data: [20, 80, 60, 90, 30, 50, 60],
                            //fillColor: "rgba(220,220,220,0.1)",
                            //strokeColor: "rgba(220,220,220,0.1)",
                            //pointColor: "rgba(220,220,220,0.1)",
                            //pointStrokeColor: "rgba(220,220,220,0.1)",

                            borderColor: [
                                'rgba(235, 117, 0,1)',
                            ],

                            lineTension: 0.5,
                            radius: 0,

                            borderWidth: 5,
                            yAxisID: 'y1',

                        },
                        {
                            type: 'line',
                            data: monthlyBMR.CurrVal,
                            borderDash: [10, 5],
                            label: 'BMR(大卡)',
                            //data: [20, 80, 60, 90, 30, 50, 60],
                            //fillColor: "rgba(220,220,220,0.1)",
                            //strokeColor: "rgba(220,220,220,0.1)",
                            //pointColor: "rgba(220,220,220,0.1)",
                            //pointStrokeColor: "rgba(220,220,220,0.1)",

                            borderColor: [
                                'rgba(235, 117, 0,0.3)',
                            ],

                            lineTension: 0.5,
                            radius: 0,

                            borderWidth: 5,
                            yAxisID: 'y1',

                        }
                        ]
                },

                options: {
                    responsive: true,

                    scales: {
                        //min: 0,

                            x: {
                            stacked: true,
                            grid: { color:"rgba(255, 148, 201,0)"}
                            },
                            y: {
                                stacked: true,
                                display: true,
                                position: 'left',
                                min: 0,
                                max: 2500,
                                grid: { color: "rgba(122, 122, 122,0.1)"},


                        },

                        y1: {
                            stacked: false,
                            display: false,
                            position: 'right',
                            min: 0,
                            max: 2500,


                        },

                    },


                },

            });


        //==================================

        $("#btnPrevMonth").click(() => {
            glMonthFlag.Val -= 1;
        })
        $("#btnNextMonth").click(() => {
            glMonthFlag.Val += 1;

        })

        $("#btnsCals").on("click", ":button", (e) => {
            $(e.currentTarget).toggleClass("primary")
            $("#btnShowWater").removeClass("primary")
            $("#btnShowWeight").removeClass("primary")

            CheckSelectedOption()
        })
        $("#btnShowWater").on("click", (e) => {
            $(e.currentTarget).toggleClass("primary")
            if ($("#btnShowWater").hasClass("primary")) {
                $("#btnsCals :button").removeClass("primary")
                $("#btnShowWeight").removeClass("primary")

            }
            else {

            }
            //remove cal btn?
            CheckSelectedOption()
        })

        $("#btnShowWeight").on("click", (e) => {
            $(e.currentTarget).toggleClass("primary")
            if ($("#btnShowWeight").hasClass("primary")) {
                $("#btnsCals :button").removeClass("primary")
                $("#btnShowWater").removeClass("primary")

            }
            else {

            }
            //remove cal btn?
            CheckSelectedOption()
        })
        //====================================
        function GetChartJson() {

            fetch('@Url.Action("GetGeneralHealthChartDatas", "HHApi_HealthReport")?memberId='+@Model.MemberID +'&monthFlag=' + glMonthFlag.Val, {
                    method: "GET",
            }).then(response => response.json()).then(data => {
                $("#titleMonth").text(data.YearMonth)
                monthlyGainedCalsArr.CurrVal = data.GainedCalsByMonth;
                monthlyDaysArr.CurrVal = data.MonthlyDays;
                monthlyBurnedCalsArr.CurrVal = data.MonthlyBurnedCals;
                monthlySubstratedGainedCalsArr.CurrVal =data.MonthlySubstratedGained
                monthlyWeightsArr.CurrVal = data.MonthlyWeights;
                monthlyGainedWaterArr.CurrVal = data.MonthlyGainedWater;
                MonthlySuggestedWaterLogRangesArr.CurrVal = data.MonthlySuggestedWaterLogRanges
                monthlyTDEEsArr.CurrVal = data.MonthlyTDEEs
                monthlyIsSuccessArr.CurrVal =data.MonthlyIsSuccess
                CheckSelectedOption()
                $('#editDoneModal').modal('hide')

                 })
        }


        function CheckSelectedOption()
        {

            if ($("#btnShowWater").hasClass("primary")) {
                monthlyGainedWaterArr.letMeKnow()
                MonthlySuggestedWaterLogRangesArr.letMeKnow()
                generalChart.options.scales.x.stacked = false
                generalChart.options.scales.y.stacked = false
                generalChart.options.scales.y.grid.color = 'rgba(0, 89, 179,1)'




                //generalChart.options.scale.y1.stacked = false


            }
            else {
                //generalChart.options.scale.x.stacked = true
                //generalChart.options.scale.y.stacked = true
                generalChart.data.datasets[3].data = null
                generalChart.data.datasets[4].data = null
                generalChart.data.datasets[5].data = null
                generalChart.update();
            }
            if ($("#btnShowWeight").hasClass("primary")) {
                monthlyWeightsArr.letMeKnow()
                generalChart.options.scales.x.stacked = false
                generalChart.options.scales.y.stacked = false
                generalChart.options.scales.y.max =60
                generalChart.options.scales.y.min = 30

                generalChart.options.scales.y.grid.color = 'rgba(255, 209, 5, 1)'


            }
            else {
                generalChart.options.scales.y.max =2500
                generalChart.options.scales.y.min = 0

                generalChart.data.datasets[2].data = null

                generalChart.update();
            }
            if ($("#btnShowGained").hasClass("primary") && $("#btnShowBurned").hasClass("primary")) {
                monthlySubstratedGainedCalsArr.letMeKnow()
                monthlyBurnedCalsArr.letMeKnow()
                monthlyTDEEsArr.letMeKnow()

                generalChart.options.scales.x.stacked = true
                generalChart.options.scales.y.stacked = true
                generalChart.options.scales.y.grid.color = "rgba(60, 120, 0, 1)"

            }
            else if ($("#btnShowGained").hasClass("primary")) {
                generalChart.data.datasets[0].data = monthlyGainedCalsArr.CurrVal
                generalChart.data.datasets[1].data = null
                generalChart.update();
                monthlyTDEEsArr.letMeKnow()
                generalChart.options.scales.x.stacked = true
                generalChart.options.scales.y.stacked = true
                generalChart.options.scales.y.grid.color = "rgba(60, 120, 0, 1)"


            }
            else if ($("#btnShowBurned").hasClass("primary")) {
                generalChart.data.datasets[0].data = null
                generalChart.data.datasets[1].data = monthlyBurnedCalsArr.CurrVal
                generalChart.data.datasets[6].data = null
                generalChart.data.datasets[7].data = null

                generalChart.update();
                generalChart.options.scales.x.stacked = true
                generalChart.options.scales.y.stacked = true
                generalChart.options.scales.y.grid.color = "rgba(60, 120, 0, 1)"


            }
            else {
                generalChart.data.datasets[0].data = null
                generalChart.data.datasets[1].data = null
                generalChart.data.datasets[6].data = null
                generalChart.data.datasets[7].data = null

                generalChart.update();
                generalChart.options.scales.x.stacked = true
                generalChart.options.scales.y.stacked = true

            }

           //----------
            //if ($("#btnShowWeight").hasClass("primary")) {
            //    monthlyWeightsArr.letMeKnow()
            //}
            //else {
            //    generalChart.data.datasets[2].data = null
            //    generalChart.update();
            //}


        }










        </script>
    }
